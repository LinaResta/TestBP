{
  "$type": "Comindware.Platform.Contracts.TaskActivityModel, Comindware.Platform.Contracts",
  "GlobalAlias": {
    "$type": "Comindware.Platform.Contracts.GlobalAlias, Comindware.Platform.Contracts",
    "Type": "Activity",
    "Owner": "UpdateStatusChaRM96b78bc06de448b88a5ae885b4933788",
    "Alias": "userTask1"
  },
  "Kind": "Script",
  "ScriptDefinition": {
    "$type": "Comindware.Platform.Contracts.ScriptTaskDefinitionModel, Comindware.Platform.Contracts",
    "Script": {
      "$type": "Comindware.Platform.Contracts.CustomRuleModel, Comindware.Platform.Contracts",
      "Type": "Custom",
      "Definition": {
        "$type": "Comindware.Platform.Contracts.CSharpRuleDefinitionModel, Comindware.Platform.Contracts",
        "Code": "// 3 ОБНОВЛЕНИЕ СТАТУСОВ ДИ CHARM TestProcess\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing Comindware.Data.Entity;\r\nusing Comindware.TeamNetwork.Api.Data;\r\nusing Comindware.TeamNetwork.Api.Data.UserCommands;\r\nusing Newtonsoft.Json;\r\nusing System.Net;\r\nusing System.IO;\r\nusing System.Text;\r\nusing System.Diagnostics;\r\nclass Script { \r\n    private class CustomWebClient : WebClient {\r\n        protected override WebRequest GetWebRequest(Uri uri) {\r\n            WebRequest w = base.GetWebRequest(uri);\r\n            w.Timeout = 10 * 60 * 1000;\r\n            return w;\r\n        }\r\n    }\r\n    \r\n    public class DocumentChange {\r\n        public string CbapProjectReference { get; set; }\r\n        public string State { get; set; }\r\n        public string SmCdId { get; set; }\r\n        public string SmCdGuid { get; set; }\r\n        public string Projector { get; set; }\r\n        public string Tester { get; set; }\r\n        public string Developer { get; set; }\r\n    }\r\n    \r\n    public class DocumentChangeRaw {\r\n        [JsonProperty(\"d\")]\r\n        public DocumentChangeRawData data { get; set; }\r\n    }\r\n    \r\n    public class DocumentChangeRawData {\r\n        [JsonProperty(\"results\")]\r\n        public List<DocumentChange> Results { get; set; }\r\n    }\r\n    \r\n    public static object GetObjectValue(string objId, string propertyAlias) { \r\n        var data = Api.TeamNetwork.ObjectService.GetPropertyValues(new[] {objId}, new string[] {propertyAlias});\r\n        return data[objId][propertyAlias];\r\n    }\r\n\r\n    public static UserCommandResult Main(UserCommandContext context, Comindware.Entities entities) {      \r\n        // считаем все значения настроек\r\n        var settingsId = entities.CustomSettings.Where(x => x.name == \"SolmanCharm\").Select(x => new { x.id }).FirstOrDefault();\r\n        var settings = entities.CustomSettingsValues.Where(x => x.customSettings == settingsId.id).Select(x => new { x.parameter, x.value }).ToList();\r\n        \r\n        // прочитаем значение логина и пароля пользователя\r\n        var userLogin = settings.Where(x => x.parameter == \"userLogin\").Select(x => x.value).FirstOrDefault();\r\n        var userPassword = settings.Where(x => x.parameter == \"userPassword\").Select(x => x.value).FirstOrDefault();\r\n        \r\n        // прочитаем систему, с которой будем интегрироваться\r\n        var currentSystem = settings.Where(x => x.parameter == \"currentSystem\").Select(x => x.value).FirstOrDefault();\r\n        var systemAddr = settings.Where(x => x.parameter == currentSystem).Select(x => x.value).FirstOrDefault();\r\n\r\n        // прочитаем время, за которое нужно считать документы ДИ\r\n        var searchParam = settings.Where(x => x.parameter == \"searchParam\").Select(x => x.value).FirstOrDefault();\r\n        \r\n        // сформируем адрес сервиса\r\n        var url = systemAddr + \"/sap/opu/odata/sap/ZGP_ODATA_CHARM_SRV/ChangeDocumentSet/?search=\" + searchParam;\r\n               \r\n        var encodedCredentials = System.Convert.ToBase64String(System.Text.Encoding.GetEncoding(\"ISO-8859-1\").GetBytes(userLogin + \":\" + userPassword));\r\n        string msg = \"\";\r\n        string responseJSON = \"\";\r\n        List<DocumentChange> documentChanges = new List<DocumentChange>();\r\n \r\n        using (var wc = new CustomWebClient()) {\r\n            wc.Encoding = System.Text.Encoding.UTF8;\r\n            wc.Headers[HttpRequestHeader.ContentType] = \"application/json\";\r\n            wc.Headers[\"accept\"] = \"application/json\";\r\n            wc.Headers[\"X-Requested-With\"] = \"X\";\r\n            wc.Headers[HttpRequestHeader.Authorization] = string.Format(\"Basic {0}\", encodedCredentials);\r\n \r\n            try {\r\n                using (var stream = wc.OpenRead(url)) {\r\n                    using(var reader = new StreamReader(stream)) {\r\n                        responseJSON = reader.ReadToEnd();\r\n                        var documentChangeResultRaw = JsonConvert.DeserializeObject<DocumentChangeRaw>(responseJSON);\r\n                        documentChanges = documentChangeResultRaw.data.Results;\r\n                        msg = JsonConvert.SerializeObject(documentChanges);\r\n                    }\r\n                }\r\n            }\r\n            catch (WebException ex) {\r\n                var resp = new StreamReader(ex.Response.GetResponseStream()).ReadToEnd();\r\n                msg = resp;\r\n                msg = \"error\";\r\n            }\r\n        }\r\n\r\n        var finishedStatusId = entities.WorkitemStatus.Where(x => x.Name == \"Завершена\").Select(x => x.id).FirstOrDefault();\r\n        var dict = new Dictionary<string, Dictionary<string, string>>();\r\n        var statesToProcess = new List<string>() {\r\n            \"Запрос срочного переноса\", \"Заявка на импорт\", \"Импортировано с ошибкой\",\r\n            \"Перенесено в QAS/Logon\", \"Перенесено в QAS/Logon(срочн.)\", \"Перенос согласован\",\r\n            \"Подтверждена отмена ДИ\", \"Подтверждение ДИ\", \"Подтверждено\",\r\n            \"Приемочное тест. не требуется\", \"Продуктивно\", \"Продуктивно (срочный)\", \"Работы по новому ДИ\",\r\n            \"Срочный перенос в PRD\", \"Срочный перенос в QAS/LOGON\", \"Срочный перенос согласован\", \"Тестирование успешно\"\r\n        };\r\n                 \r\n        foreach(var docChange in documentChanges) {\r\n            var taskId = docChange.CbapProjectReference;\r\n\r\n            if (string.IsNullOrEmpty(taskId) || taskId.Contains(\".\")) {\r\n                continue;\r\n            }\r\n\r\n            if (entities.Workitem.Where(x => x.id == taskId).Select(x => new { x.id }).ToList().Count() == 0) {\r\n                continue;\r\n            }\r\n            \r\n            if (!dict.ContainsKey(taskId)) {            \r\n                var docChangesByGuids = new Dictionary<string, string>();\r\n                var docChangesRawObj = GetObjectValue(taskId, \"ChaRMDoc\");\r\n                var docChangesRaw = docChangesRawObj as object[];\r\n \r\n                if (docChangesRaw != null) {\r\n                    foreach(var dcr in docChangesRaw) {\r\n                        var dcrStr = dcr as string;\r\n                        var dcrGuid = GetObjectValue(dcrStr, \"GUID\") as string;\r\n                        docChangesByGuids.Add(dcrGuid, dcrStr);\r\n                    }\r\n                    dict.Add(taskId, docChangesByGuids);\r\n                } else {\r\n                    var docChangesRawStr = docChangesRawObj as string;\r\n                    if (docChangesRawStr != null) {\r\n                        var dcrGuid = GetObjectValue(docChangesRawStr, \"GUID\") as string;\r\n                        docChangesByGuids.Add(dcrGuid, docChangesRawStr);\r\n                    }\r\n                }\r\n            }\r\n              \r\n            if (!dict.ContainsKey(taskId)) {\r\n                continue;\r\n            }\r\n            if (!dict[taskId].ContainsKey(docChange.SmCdGuid)) {\r\n                continue;\r\n            }\r\n            var docChangeCbapId = dict[taskId][docChange.SmCdGuid];\r\n            var docStatus = GetObjectValue(docChangeCbapId, \"docStatus\") as string;\r\n \r\n            if (!docChange.State.Equals(docStatus)) {\r\n                var docChangeData = new Dictionary<string, object> {\r\n                    { \"docStatus\", docChange.State }\r\n                };\r\n                Api.TeamNetwork.ObjectService.EditWithAlias(\"ChaRMDoc\", docChangeCbapId, docChangeData);\r\n           \r\n                if (statesToProcess.Any(x => x.Contains(docChange.State))) {  \r\n                    // если по задаче был запущен процесс, то нужно его завершить\r\n                    var activeTask = Api.Process.ProcessObjectService.GetReferencedTasks(taskId).Where(x => x.Status == UserTaskStatus.InProgress).FirstOrDefault(); \r\n                    if (activeTask != null) {\r\n                        Api.TeamNetwork.UserTaskService.Complete(activeTask.Id, true);\r\n                    }\r\n                    \r\n                    var performers = new HashSet<string>();  \r\n                    if (!string.IsNullOrEmpty(docChange.Projector)) {\r\n                        var projectorSNGLogin = entities.Users.Where(x => x.SAP_LOGIN == docChange.Projector).Select(x => x.SNG_LOGIN).FirstOrDefault();\r\n                        if (!string.IsNullOrEmpty(projectorSNGLogin)) {   \r\n                            var projectorId = Api.Base.AccountService.FindAccountIdByUsername(projectorSNGLogin);\r\n                            if (!string.IsNullOrEmpty(projectorId)) {\r\n                                performers.Add(projectorId);\r\n                            }   \r\n                        }\r\n                    }\r\n\r\n                    if (!string.IsNullOrEmpty(docChange.Tester)) {\r\n                        var testerSNGLogin = entities.Users.Where(x => x.SAP_LOGIN == docChange.Tester).Select(x => x.SNG_LOGIN).FirstOrDefault();\r\n                        if (!string.IsNullOrEmpty(testerSNGLogin)) {\r\n                            var testerId = Api.Base.AccountService.FindAccountIdByUsername(testerSNGLogin);\r\n                            if (!string.IsNullOrEmpty(testerId)) {\r\n                                performers.Add(testerId);\r\n                            }\r\n                        }\r\n                    }\r\n                    if (!string.IsNullOrEmpty(docChange.Developer)) {\r\n                        var developerSNGLogin = entities.Users.Where(x => x.SAP_LOGIN == docChange.Developer).Select(x => x.SNG_LOGIN).FirstOrDefault();\r\n                        if (!string.IsNullOrEmpty(developerSNGLogin)) {\r\n                            var developerId = Api.Base.AccountService.FindAccountIdByUsername(developerSNGLogin);\r\n                            if(!string.IsNullOrEmpty(developerId)) {\r\n                                performers.Add(developerId);\r\n                            }\r\n                        }\r\n                    }\r\n                    var taskData = new Dictionary<string, object> {\r\n                        { \"Status\", finishedStatusId },\r\n                        { \"Performers_Text_History\", \"\"}   \r\n                    };\r\n                    \r\n                    if (performers.Any()) {\r\n                        taskData.Add(\"Performers\", performers);\r\n                    }\r\n                    \r\n                    // проставим фактическую дату начала (если ее нет)\r\n                    var dateFact = entities.Workitem.Where(x => x.id == taskId).Select(x => new { x.StartDate }).FirstOrDefault().StartDate;\r\n                    var datePlan = entities.Workitem.Where(x => x.id == taskId).Select(x => new { x.PlannedStartDate }).FirstOrDefault().PlannedStartDate; \r\n                    if (dateFact == null) {\r\n                        taskData.Add(\"StartDate\", datePlan);\r\n                    }\r\n\r\n                    // и фактическую дату окончания если ее еще нет\r\n                    var dateEndFact = entities.Workitem.Where(x => x.id == taskId).Select(x => new { x.EndDate }).FirstOrDefault().EndDate;\r\n                    if (dateEndFact == null) {\r\n                    \ttaskData.Add(\"EndDate\", DateTime.Now);\r\n                \t}\r\n                    \r\n                    // изменим данные по задаче\r\n                    Api.TeamNetwork.ObjectService.EditWithAlias(\"Workitem\", taskId, taskData);\r\n\r\n                    // присоединим новых людей из назначенных исполнителей к проектной команде\r\n                    var planId = entities.Workitem.Where(x => x.id == taskId).Select(x => new { x.PlanWork, x.parentProject }).FirstOrDefault().PlanWork;\r\n                    var projectId = entities.Workitem.Where(x => x.id == taskId).Select(x => new { x.PlanWork, x.parentProject }).FirstOrDefault().parentProject;\r\n                            \r\n                    // если не нашли план работ, то найдем проект, к которому привязана работа\r\n                    //var teamMember = entities.ProjectTeam.Where(x => x.WorkPlan == \"XXXX\").Select(x => new {x.Performers }).FirstOrDefault().Performers.FirstOrDefault();\r\n\r\n                    foreach (var perf in performers) {\r\n                        // проверим, есть ли этот человек в рабочей группу по этому плану или проекту\r\n                        var teamMember = entities.ProjectTeam.Where(x => x.WorkPlan == \"XXXX\").Where(x => x.Performers.FirstOrDefault() == \"XXXX\").Select(x => new {x.Performers }).FirstOrDefault();\r\n                        if (planId != null) {\r\n                            teamMember = entities.ProjectTeam.Where(x => x.WorkPlan == planId).Where(x => x.Performers.FirstOrDefault() == perf).Select(x => new {x.Performers }).FirstOrDefault();\r\n                        } else if (projectId != null) {\r\n                            teamMember = entities.ProjectTeam.Where(x => x.Project == projectId).Where(x => x.Performers.FirstOrDefault() == perf).Select(x => new {x.Performers }).FirstOrDefault();\r\n                        }\r\n\r\n                        if (teamMember == null) {\r\n                            // человека нет в рабочей группе, нужно его добавить\r\n                            // определим орг.единицу нового человека из справочника пользователей\r\n                            var loginAD = Api.Base.AccountService.GetAccount(perf).Username;\r\n                            var userInfo = entities.Users.Where(x => x.SNG_LOGIN == loginAD).Select(x => new { x.SAP_LOGIN, x.WERKS_TEXT, x.OE }).FirstOrDefault();\r\n                            \r\n                            // определим роль участника\r\n                            var userRole = \"786547\"; // по-умолчанию роль просто участника\r\n                            if (userInfo.SAP_LOGIN == docChange.Projector) {\r\n                                userRole = \"626\";\r\n                            } else if (userInfo.SAP_LOGIN == docChange.Tester) {\r\n                                userRole = \"631\";\r\n                            } else if (userInfo.SAP_LOGIN == docChange.Developer) {\r\n                                userRole = \"628\";\r\n                            } \r\n \r\n                            var teamData = new Dictionary<string, object> {\r\n                                {\"Role\", userRole},\r\n                                {\"Performers\", perf},\r\n                                {\"Project\", projectId},\r\n                                {\"OrgEd\", userInfo.WERKS_TEXT + \" \" + userInfo.OE},\r\n                                {\"WorkPlan\", planId}\r\n                            };\r\n                            Api.TeamNetwork.ObjectService.CreateWithAlias(\"ProjectTeam\", teamData);\r\n                        }\r\n\r\n                        \r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        return new UserCommandResult {\r\n            Success = true,\r\n            Commited = true,\r\n            ResultType = UserCommandResultType.DataChange,\r\n            Messages = new[]\r\n            {\r\n                new UserCommandMessage\r\n                {\r\n                    Severity = SeverityLevel.Normal,\r\n                    Text = \"Обновление статусов завершено\"\r\n                }\r\n            }\r\n        };\r\n    }\r\n}",
        "Type": "CSharpExpression"
      }
    }
  },
  "FormAlias": {
    "$type": "Comindware.Platform.Contracts.GlobalAlias, Comindware.Platform.Contracts",
    "Type": "Undefined"
  },
  "BehaviourState": "Active",
  "Title": "Получение статусов ДИ",
  "IsTitleSet": true,
  "Position": {
    "$type": "Comindware.Platform.Contracts.VectorModel, Comindware.Platform.Contracts",
    "X": 460.0,
    "Y": 165.0
  },
  "Size": {
    "$type": "Comindware.Platform.Contracts.DimensionsModel, Comindware.Platform.Contracts",
    "Width": 120.0,
    "Height": 70.0
  },
  "Connectors": {
    "$type": "Comindware.Platform.Contracts.ConnectorModel[], Comindware.Platform.Contracts",
    "$values": [
      {
        "$type": "Comindware.Platform.Contracts.ConnectorModel, Comindware.Platform.Contracts",
        "Target": {
          "$type": "Comindware.Platform.Contracts.GlobalAlias, Comindware.Platform.Contracts",
          "Type": "Activity",
          "Owner": "UpdateStatusChaRM96b78bc06de448b88a5ae885b4933788",
          "Alias": "flow2"
        },
        "TargetConnectorIndex": 10,
        "OwnIndex": 100
      },
      {
        "$type": "Comindware.Platform.Contracts.ConnectorModel, Comindware.Platform.Contracts",
        "Target": {
          "$type": "Comindware.Platform.Contracts.GlobalAlias, Comindware.Platform.Contracts",
          "Type": "Activity",
          "Owner": "UpdateStatusChaRM96b78bc06de448b88a5ae885b4933788",
          "Alias": "flow3"
        },
        "TargetConnectorIndex": 0,
        "OwnIndex": 40
      }
    ]
  },
  "OwnerEmbeddedProcessActivityAlias": {
    "$type": "Comindware.Platform.Contracts.GlobalAlias, Comindware.Platform.Contracts",
    "Type": "Undefined"
  },
  "MountedOnAlias": {
    "$type": "Comindware.Platform.Contracts.GlobalAlias, Comindware.Platform.Contracts",
    "Type": "Undefined"
  },
  "Type": "Task"
}