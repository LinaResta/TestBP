{
  "$type": "Comindware.Platform.Contracts.UserCommandConfigurationModel, Comindware.Platform.Contracts",
  "GlobalAlias": {
    "$type": "Comindware.Platform.Contracts.GlobalAlias, Comindware.Platform.Contracts",
    "Type": "UserCommand",
    "Owner": "Project",
    "Alias": "Export_project"
  },
  "Name": "Печать плана",
  "IsSystem": false,
  "IsDisabled": false,
  "IsPrepare": true,
  "SkipValidation": true,
  "Context": "Record",
  "Multiplicity": "OneByOne",
  "Kind": "ExportObject",
  "ResultType": "File",
  "ScriptRule": {
    "$type": "Comindware.Platform.Contracts.UserCommandScriptRuleModel, Comindware.Platform.Contracts",
    "Type": "UserCommandScript",
    "Definition": {
      "$type": "Comindware.Platform.Contracts.CSharpRuleDefinitionModel, Comindware.Platform.Contracts",
      "EntryPoint": "Script",
      "Code": "// печать плана проекта\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Diagnostics;\r\nusing System.Linq;\r\nusing System.Text.RegularExpressions;\r\nusing Comindware.Data.Entity;\r\nusing Comindware.TeamNetwork.Api.Data.UserCommands;\r\nusing System.IO;\r\nusing Aspose.Words;\r\n\r\n\r\npublic class NaturalSortComparer : IComparer<string>, IDisposable {\r\n    private bool isAscending;\r\n\r\n    public NaturalSortComparer(bool inAscendingOrder = true) {\r\n        this.isAscending = inAscendingOrder;\r\n    }\r\n\r\n    #region IComparer<string> Members\r\n\r\n    public int Compare(string x, string y) {\r\n        throw new NotImplementedException();\r\n    }\r\n\r\n    #endregion\r\n\r\n    #region IComparer<string> Members\r\n\r\n    int IComparer<string>.Compare(string x, string y) {\r\n        if (x == y) {\r\n            return 0;\r\n        }\r\n\r\n        string[] x1, y1;\r\n\r\n        if (!table.TryGetValue(x, out x1)) {\r\n            x1 = Regex.Split(x.Replace(\" \", \"\"), \"([0-9]+)\");\r\n            table.Add(x, x1);\r\n        }\r\n\r\n        if (!table.TryGetValue(y, out y1)) {\r\n            y1 = Regex.Split(y.Replace(\" \", \"\"), \"([0-9]+)\");\r\n            table.Add(y, y1);\r\n        }\r\n\r\n        int returnVal;\r\n\r\n        for (int i = 0; i < x1.Length && i < y1.Length; i++) {\r\n            if (x1[i] != y1[i]) {\r\n                returnVal = PartCompare(x1[i], y1[i]);\r\n                return isAscending ? returnVal : -returnVal;\r\n            }\r\n        }\r\n\r\n        if (y1.Length > x1.Length) {\r\n            returnVal = 1;\r\n        } else if (x1.Length > y1.Length) {\r\n            returnVal = -1;\r\n        } else {\r\n            returnVal = 0;\r\n        }\r\n\r\n        return isAscending ? returnVal : -returnVal;\r\n    }\r\n\r\n    private static int PartCompare(string left, string right) {\r\n        int x, y;\r\n        if (!int.TryParse(left, out x))\r\n            return left.CompareTo(right);\r\n\r\n        if (!int.TryParse(right, out y))\r\n            return left.CompareTo(right);\r\n\r\n        return x.CompareTo(y);\r\n    }\r\n\r\n    #endregion\r\n\r\n    private Dictionary<string, string[]> table = new Dictionary<string, string[]>();\r\n\r\n    public void Dispose() {\r\n        table.Clear();\r\n        table = null;\r\n    }\r\n}\r\n\r\n\r\npublic static class Script {\r\n\r\n    public static UserCommandResult ShowMessageToUser(string text) {\r\n        if (text == null) {\r\n            text = \"EMPTY STRING\";\r\n        }\r\n        return new UserCommandResult {\r\n            Success = false,\r\n            Commited = false,\r\n            ResultType = UserCommandResultType.Notificate,\r\n            Messages = new[] {\r\n                new UserCommandMessage {\r\n                    Severity = SeverityLevel.Normal,\r\n                    Text = text\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    public static string ShortenFIO(string fullName) {\r\n        // вместо Иванов Иван Иванович сделаем И.И.Иванов\r\n        var split = fullName.Split(' ');\r\n        if (split.Length == 3) {\r\n            return string.Format(\"{0}.{1}.{2}\", split[1][0],split[2][0],split[0]);\r\n        } else {\r\n            return fullName;\r\n        }\r\n    }\r\n    \r\n    public static List<PersonsAgree> AddAgreePersons(Comindware.Entities entities, string projectId) {\r\n                \r\n        // соберем список согласующих\r\n        var agreePersons = new List<PersonsAgree>();\r\n        \r\n        // считаем утверждающего и согласовывающих \r\n        var persons = entities.PersonAgree.Where(x => x.Project == projectId).OrderBy(x => x.Autonumber).Select(x => new { x.Role, x.FIO, x.Post }).ToList();\r\n        \r\n        foreach(var p in persons)  {        \r\n            if (p.Role == \"763308\") {   // согласовано\r\n                // для каждого согласующего вытащим его И.О.Фамилию и должность\r\n                var person = new PersonsAgree();\r\n                person.agreePost = p.Post;  // вытащим должность человека\r\n                // поставим нормальные кавычки и добавим неразрывный пробел\r\n                if (person.agreePost != null) {\r\n                    person.agreePost = person.agreePost.Replace(\" \\\"Сургутнефтегаз\\\"\", ControlChar.NonBreakingSpace + \"«Сургутнефтегаз»\");\r\n                    person.agreePost = person.agreePost.Replace(\" \\\"СургутАСУнефть\\\"\", ControlChar.NonBreakingSpace + \"«СургутАСУнефть»\");       \r\n                }\r\n                \r\n                foreach(var userId in p.FIO)  {\r\n                    // получим И.О.Фамилию\r\n                    person.agreeName = ShortenFIO(Api.Base.AccountService.GetAccountFullName( userId )); \r\n                }   \r\n                agreePersons.Add(person);          \r\n            }\r\n        }\r\n        \r\n        return agreePersons;\r\n    }\r\n    \r\n    public static List<PersonsApprove> AddApprovePersons(Comindware.Entities entities, string projectId) {\r\n                \r\n        // соберем список утверждающих\r\n        var approvePersons = new List<PersonsApprove>();\r\n        \r\n        // считаем утверждающего и согласовывающих \r\n        var persons = entities.PersonAgree.Where(x => x.Project == projectId).OrderBy(x => x.Autonumber).Select(x => new { x.Role, x.FIO, x.Post }).ToList();\r\n \r\n        foreach(var p in persons)  {        \r\n            if (p.Role == \"763304\") {   // утверждаю\r\n                // для каждого согласующего вытащим его И.О.Фамилию и должность\r\n                var person = new PersonsApprove();\r\n                person.approvePost = p.Post;    // вытащим должность человека\r\n                // поставим нормальные кавычки и добавим неразрывный пробел\r\n                if (person.approvePost != null) {\r\n                    person.approvePost = person.approvePost.Replace(\" \\\"Сургутнефтегаз\\\"\", ControlChar.NonBreakingSpace + \"«Сургутнефтегаз»\");\r\n                    person.approvePost = person.approvePost.Replace(\" \\\"СургутАСУнефть\\\"\", ControlChar.NonBreakingSpace + \"«СургутАСУнефть»\");       \r\n                }\r\n                \r\n                foreach(var userId in p.FIO)  {\r\n                    // получим И.О.Фамилию\r\n                    person.approveName = ShortenFIO(Api.Base.AccountService.GetAccountFullName( userId )); \r\n                }   \r\n                approvePersons.Add(person);\r\n            }\r\n        }\r\n        \r\n        return approvePersons;\r\n    }\r\n    \r\n    public static string CreateOrgResp(Comindware.Entities entities, string userId, string planId, bool printOrg, bool printFio) {\r\n\r\n        // получим сокращенное фио исполнителя\r\n        var userFIO = ShortenFIO(Api.Base.AccountService.GetAccountFullName( userId ));\r\n \r\n        // считаем состав проектной команды\r\n        var projectTeam = entities.ProjectTeam.Where(x => x.Project == planId).Select(x => new { x.Performers, x.OrgEd, }).ToList();\r\n            \r\n        // и если пользователь находится в проектной команде, то вытащим должность и орг.единицу оттуда\r\n        string orgEd = \"\";\r\n        foreach(var user in projectTeam)  {     \r\n            if (user.Performers.Contains(userId)) {\r\n                orgEd = user.OrgEd;\r\n            }\r\n        }\r\n        \r\n        // если же пользователя нет в проектной команде, то определим орг.единицу исполнителя\r\n        if (orgEd == \"\") {\r\n            var loginAD = Api.Base.AccountService.GetAccount(userId).Username;\r\n            if (loginAD != null) {\r\n                var organisation = entities.Users.Where(x => x.SNG_LOGIN == loginAD).Select(x => new { x.OE }).FirstOrDefault();\r\n                if (organisation != null) {\r\n                    orgEd = organisation.OE;\r\n                }\r\n            }\r\n        }\r\n        \r\n        // поставим нормальные кавычки и добавим неразрывный пробел\r\n        if (orgEd != null) {\r\n            orgEd = orgEd.Replace(\" \\\"Сургутнефтегаз\\\"\", ControlChar.NonBreakingSpace + \"«Сургутнефтегаз»\");\r\n            orgEd = orgEd.Replace(\" \\\"СургутАСУнефть\\\"\", ControlChar.NonBreakingSpace + \"«СургутАСУнефть»\");       \r\n        }\r\n \r\n        if (printOrg == true && printFio == true) {\r\n            if (orgEd + userFIO != userFIO) {\r\n                return string.Format(\"{0} ({1})\", orgEd, userFIO);\r\n            } else {\r\n                return string.Format(\"{0}\", userFIO);\r\n            }\r\n        } else if (printOrg == false && printFio == true) {\r\n            return string.Format(\"{0}\", userFIO);\r\n        } else if (printOrg == true && printFio == false) {\r\n            return string.Format(\"{0}\", orgEd);\r\n        } else {\r\n            return \"\";\r\n        }\r\n    }\r\n    \r\n    public static UserCommandResult Main(UserCommandContext userCommandContext, Comindware.Entities entities) {\r\n        // прочитаем id проекта для которого будем делать печать\r\n        var rootRecordId = userCommandContext.ObjectIds[0];\r\n        \r\n        // данные родительского проекта\r\n        var projectData = entities.Project.Where(x => x.id == rootRecordId).Select(x => new { x.id, x.Code, x.Name, x.PrintOrg, x.PrintFio, x.PrintComm}).FirstOrDefault();\r\n \r\n        // считаем какие фазы есть в проекте\r\n        var hasPhases = entities.Project.Where(x => x.id == rootRecordId).Select(x => new { x.HasDesigningPhase, x.HasRealizationPhase, x.HasTestProductionPhase, x.DesigningPhase, x.RealizationPhase, x.TestProductionPhase }).FirstOrDefault();\r\n \r\n        // считаем все задачи в проекте\r\n        var allWorks = entities.Workitem.Where(x => x.parentProject == rootRecordId).Select(x => new { x.id }).ToList();\r\n        \r\n        // тут будут только нужные нам задачи для печати\r\n        var worksToPrint = new List<String>();\r\n\r\n        // получим id всех элементов отмеченных галочкой\r\n        var selectedItems = userCommandContext.SelectedIds;         \r\n        // и удалим id-шники нерелевантные к задачам\r\n \r\n        foreach(var s in selectedItems)  {\r\n            if (allWorks.FindIndex(f => f.id == s) >= 0) {\r\n                worksToPrint.Add(s);\r\n            }\r\n        }\r\n    \r\n        // если нет данных на печать, то нужно выводить на печать весь план проекта\r\n        if (worksToPrint.Count() == 0) {\r\n            allWorks = entities.Workitem.Where(x => x.parentProject == rootRecordId).Select(x => new { x.id }).ToList();\r\n            foreach (var a in allWorks) {\r\n                worksToPrint.Add(a.id);\r\n            } \r\n        }\r\n\r\n        // создадим заведомо пустой список, в который будем складывать все нужные нам задачи\r\n        var planPositions = entities.Workitem.Where(x => x.id == \"XXXX\").Select(x => new {\r\n               x.AutoNumber, x.SerialNumber, x.Name, x.PlannedStartDate, x.PlannedEndDate, x.Responsible, x.Performers, x.Comment, x.id, x.DesigningPhase, x.RealizationPhase, x.TestProductionPhase\r\n            }).ToList();\r\n\r\n        var tempList = new List<String>(worksToPrint);\r\n        worksToPrint.Clear();\r\n        \r\n        // прочитаем текущую фазу в проекте\r\n        var currentPhase = 0;\r\n        var phaseValue = entities.Project.Where(x => x.id == rootRecordId).Select(x => new {x.CurrentPhase}).FirstOrDefault();\r\n        if (phaseValue.CurrentPhase != null) {\r\n            currentPhase = (int) phaseValue.CurrentPhase;\r\n        } else {\r\n            // не смогли считать номер текущей фазы в проекте\r\n            return ShowMessageToUser(\"Пустой или неправильный атрибут CurrentPhase - номер текущей фазы в проекте\");\r\n        } \r\n \r\n        // отсортируем списки по порядковому номеру\r\n        if ((bool) hasPhases.HasDesigningPhase && currentPhase == 1) {\r\n            var phase1Positions = entities.Workitem.Where(w => tempList.Any( x => tempList.Contains(w.id))).Where(x => x.PHASE1_ID == hasPhases.DesigningPhase).Select(x => new { x.id, x.AutoNumber }).ToList();\r\n            phase1Positions = phase1Positions.OrderBy(o=>o.AutoNumber, new NaturalSortComparer()).ToList(); \r\n            foreach (var p in phase1Positions) {\r\n                worksToPrint.Add(p.id);\r\n            }\r\n        }\r\n        \r\n        if ((bool) hasPhases.HasRealizationPhase && currentPhase <= 2) {\r\n            var phase2Positions = entities.Workitem.Where(w => tempList.Any( x => tempList.Contains(w.id))).Where(x => x.PHASE2_ID == hasPhases.RealizationPhase).Select(x => new { x.id, x.AutoNumber }).ToList();\r\n            phase2Positions = phase2Positions.OrderBy(o=>o.AutoNumber, new NaturalSortComparer()).ToList(); \r\n            foreach (var p in phase2Positions) {\r\n                worksToPrint.Add(p.id);\r\n            }\r\n        }\r\n\r\n        if ((bool) hasPhases.HasTestProductionPhase && currentPhase <= 3) {\r\n            var phase3Positions = entities.Workitem.Where(w => tempList.Any( x => tempList.Contains(w.id))).Where(x => x.PHASE3_ID == hasPhases.TestProductionPhase).Select(x => new { x.id, x.AutoNumber }).ToList();\r\n            phase3Positions = phase3Positions.OrderBy(o=>o.AutoNumber, new NaturalSortComparer()).ToList();   \r\n            foreach (var p in phase3Positions) {\r\n                worksToPrint.Add(p.id);\r\n            }      \r\n        }\r\n \r\n        var checkedPhase1 = 0;\r\n        var checkedPhase2 = 0;\r\n        var checkedPhase3 = 0;\r\n\r\n        foreach(var w in worksToPrint)  {\r\n            // вытащим все данные по задаче\r\n            var tempPosition = entities.Workitem.Where(x => x.id == w).Select(x => new {\r\n               x.AutoNumber, x.SerialNumber, x.Name, x.PlannedStartDate, x.PlannedEndDate, x.Responsible, x.Performers, x.Comment, x.id, x.DesigningPhase, x.RealizationPhase, x.TestProductionPhase\r\n            }).FirstOrDefault();\r\n\r\n            planPositions.Add(tempPosition);\r\n\r\n            if (tempPosition.DesigningPhase != null) { \r\n                checkedPhase1 = 1;\r\n            }\r\n            if (tempPosition.RealizationPhase != null) {\r\n                checkedPhase2 = 1;\r\n            }\r\n            if (tempPosition.TestProductionPhase != null) {\r\n                checkedPhase3 = 1;\r\n            }\r\n        }\r\n\r\n        var dataToExport = new Project() {\r\n            codeName = projectData.Code,\r\n            projName = projectData.Name,\r\n            nameType = \"План работ\",\r\n        };\r\n        \r\n        var positionsToAdd = new List<PlanWork>();\r\n\r\n        // префикс для сквозной интеграции\r\n        var prefixCounter = 0;\r\n \r\n        var TestProductionPhase_prev = \"\";\r\n        var RealizationPhase_prev = \"\";\r\n        var DesigningPhase_prev = \"\";\r\n\r\n        if (checkedPhase1 + checkedPhase2 + checkedPhase3 == 1) {\r\n            if (checkedPhase1 == 1) { dataToExport.nameType = \"План работ концептуального проектирования по проекту\";    }\r\n            if (checkedPhase2 == 1) { dataToExport.nameType = \"План работ технического проектирования и реализации по проекту\";  }\r\n            if (checkedPhase3 == 1) { dataToExport.nameType = \"План работ подготовки и проведения опытно-промышленной эксплуатации по проекту\"; }\r\n        }\r\n \r\n        var header1 = new PlanWork();\r\n        var header1Added = 0;\r\n        var header2Added = 0;\r\n        var header2 = new PlanWork();\r\n        var header3 = new PlanWork();       \r\n        \r\n        header1.workName = \"Концептуальное проектирование\";\r\n        header2.workName = \"Техническое проектирование и реализация\";\r\n        header3.workName = \"Подготовка и проведение опытно-промышленной эксплуатации\"; \r\n\r\n        bool needToPrintOrg = false;\r\n        if (projectData.PrintOrg != null && (bool) projectData.PrintOrg == true) {\r\n            needToPrintOrg = true;\r\n        }\r\n\r\n        bool needToPrintFio = false;\r\n        if (projectData.PrintFio != null && (bool) projectData.PrintFio == true) {\r\n            needToPrintFio = true;\r\n        }\r\n\r\n        bool needToPrintComm = false;\r\n        if (projectData.PrintComm != null && (bool) projectData.PrintComm == true) {\r\n            needToPrintComm = true;\r\n        }\r\n \r\n        // идем по общему списку задач\r\n        foreach(var p in planPositions)  {\r\n            var singlePosition  = new PlanWork() {\r\n                autoNumber  = p.AutoNumber.ToString(),\r\n                workName    = p.Name,\r\n                startDate   = p.PlannedStartDate,\r\n                endDate     = p.PlannedEndDate,\r\n                comment     = p.Comment,\r\n                responsible = \"\",\r\n                performers  = \"\",\r\n            };  \r\n\r\n            // из-за смещения часовых поясов добавим 5 часов\r\n            if (p.PlannedStartDate != null) {\r\n                singlePosition.startDate = ((DateTime) p.PlannedStartDate).AddHours(5);\r\n            }\r\n\r\n            if (p.PlannedEndDate != null) {\r\n                singlePosition.endDate = ((DateTime) p.PlannedEndDate).AddHours(5);\r\n            }\r\n                        \r\n            // если фаза сменилась, то нужно увеличить счетчик\r\n            if (((p.DesigningPhase != DesigningPhase_prev ) && (p.DesigningPhase != null)) ||\r\n                ((p.RealizationPhase != RealizationPhase_prev ) && (p.RealizationPhase != null)) ||\r\n                ((p.TestProductionPhase != TestProductionPhase_prev ) && (p.TestProductionPhase != null))) {\r\n\r\n                DesigningPhase_prev      = p.DesigningPhase;\r\n                RealizationPhase_prev    = p.RealizationPhase;\r\n                TestProductionPhase_prev = p.TestProductionPhase;   \r\n                 \r\n                if (currentPhase == 1) {                \r\n                    if (p.DesigningPhase != null) {\r\n                        prefixCounter++;\r\n                        header1.autoNumber = string.Format(\"{0}\", prefixCounter);\r\n                        positionsToAdd.Add(header1);\r\n                    } else if (p.RealizationPhase != null) {\r\n                        prefixCounter++;\r\n                        header2.autoNumber = string.Format(\"{0}\", prefixCounter);\r\n                        positionsToAdd.Add(header2);\r\n                    } else if (p.TestProductionPhase != null) {\r\n                        prefixCounter++;\r\n                        header3.autoNumber = string.Format(\"{0}\", prefixCounter);\r\n                        positionsToAdd.Add(header3);\r\n                    }\r\n                }\r\n                \r\n                if (currentPhase == 2) {\r\n                    if (hasPhases.HasDesigningPhase == true && header1Added == 0) {\r\n                        // пишем, что фаза 1 выполнена\r\n                        prefixCounter++;\r\n                        header1.autoNumber = string.Format(\"{0}\", prefixCounter);\r\n                        header1.comment = \"Выполнено\";\r\n                        positionsToAdd.Add(header1);\r\n                        // чтобы второй раз не писать выполнено, установим false\r\n                        header1Added = 1;\r\n                    }\r\n                    if (p.RealizationPhase != null) {\r\n                        prefixCounter++;\r\n                        header2.autoNumber = string.Format(\"{0}\", prefixCounter);\r\n                        positionsToAdd.Add(header2);\r\n                    } else if (p.TestProductionPhase != null) {\r\n                        prefixCounter++;\r\n                        header3.autoNumber = string.Format(\"{0}\", prefixCounter);\r\n                        positionsToAdd.Add(header3);\r\n                    }\r\n                }\r\n                \r\n                if (currentPhase == 3) {\r\n                    if (hasPhases.HasDesigningPhase == true && header1Added == 0) {\r\n                        // пишем, что фаза 1 выполнена\r\n                        prefixCounter++;\r\n                        header1.autoNumber = string.Format(\"{0}\", prefixCounter);\r\n                        header1.comment = \"Выполнено\";\r\n                        positionsToAdd.Add(header1);\r\n                        // чтобы второй раз не писать выполнено, установим false\r\n                        header1Added = 1;\r\n                    }\r\n                    if (hasPhases.HasRealizationPhase == true && header2Added == 0) {\r\n                        // пишем, что фаза 1 выполнена\r\n                        prefixCounter++;\r\n                        header2.autoNumber = string.Format(\"{0}\", prefixCounter);\r\n                        header2.comment = \"Выполнено\";\r\n                        positionsToAdd.Add(header2);\r\n                        // чтобы второй раз не писать выполнено, установим false\r\n                        header2Added = 1;\r\n                    }\r\n                    \r\n                    if (p.TestProductionPhase != null) {\r\n                        prefixCounter++;\r\n                        header3.autoNumber = string.Format(\"{0}\", prefixCounter);\r\n                        positionsToAdd.Add(header3);\r\n                    }\r\n                }        \r\n            }\r\n        \r\n            singlePosition.autoNumber = String.Format(\"{0}.{1}\", prefixCounter, p.AutoNumber);\r\n      \r\n            // получим ответственного\r\n            if(p.Responsible != null) { \r\n                var userIds = p.Responsible.ToList();\r\n                foreach (var singleId in userIds) {\r\n                    // результат будет в виде строки ОРГ.ЕДИНИЦА(ФИО)\r\n                    // сначала определим формат вывода с ФИО или БЕЗ\r\n                    var mergedString = CreateOrgResp(entities, singleId, projectData.id, needToPrintOrg, needToPrintFio);\r\n                    if (singlePosition.responsible != \"\") {\r\n                        singlePosition.responsible = singlePosition.responsible + \", \" + mergedString;\r\n                    } else {\r\n                        singlePosition.responsible = mergedString;\r\n                    }\r\n                }\r\n            }\r\n\r\n        \r\n            // соединим всех исполнителей через \r\n            if(p.Performers != null) { \r\n                var userIds = p.Performers.ToList();\r\n                foreach (var singleId in userIds) {\r\n                    // результат будет в виде строки ОРГ.ЕДИНИЦА(ФИО)\r\n                    // сначала определим формат вывода с ФИО или БЕЗ\r\n                    var mergedString = CreateOrgResp(entities, singleId, projectData.id, needToPrintOrg, needToPrintFio);\r\n                    if (singlePosition.performers != \"\") {\r\n                        singlePosition.performers = singlePosition.performers + \", \" + mergedString;\r\n                    } else {\r\n                        singlePosition.performers = mergedString;\r\n                    }\r\n                }\r\n            }\r\n            \r\n            // если в списке ответственных выбрана организация, то нужно удалить дубли из отчетственных и исполнителей\r\n            if (needToPrintOrg == true) {\r\n                singlePosition.responsible = String.Join(\", \", singlePosition.responsible.Split(',').Select(x => x.Trim()).ToList().Distinct(StringComparer.CurrentCultureIgnoreCase).ToArray());\r\n                singlePosition.performers = String.Join(\", \", singlePosition.performers.Split(',').Select(x => x.Trim()).ToList().Distinct(StringComparer.CurrentCultureIgnoreCase).ToArray());\r\n            }\r\n            \r\n            positionsToAdd.Add(singlePosition); \r\n        }\r\n \r\n        // табличка с работами готова            \r\n        dataToExport.planWorkPositions = positionsToAdd;\r\n        \r\n        // соберем список согласующих\r\n        dataToExport.agreePositions = AddAgreePersons(entities, rootRecordId);\r\n        if (dataToExport.agreePositions.Count() > 0) {\r\n            dataToExport.approvedText = \"СОГЛАСОВАНО\";\r\n        }\r\n\r\n        dataToExport.approvePositions = AddApprovePersons(entities, rootRecordId);\r\n        \r\n        // внесем руководителя проекта под основной табличкой\r\n        // считаем состав проектной команды\r\n        var projectTeam = entities.ProjectTeam.Where(x => x.Project == rootRecordId).Select(x => new { x.Performers, x.Role, x.OrgEd }).ToList();\r\n        foreach(var user in projectTeam)  {     \r\n            if (user.Role == \"634\") { \r\n                dataToExport.manager = ShortenFIO(Api.Base.AccountService.GetAccountFullName( user.Performers.First()));\r\n                var loginAD = Api.Base.AccountService.GetAccount(user.Performers.First()).Username;\r\n                var tempPost = entities.Users.Where(x => x.SNG_LOGIN == loginAD).Select(x => new { x.PLANS, x.OE, x.WERKS_TEXT }).FirstOrDefault(); \r\n                string orgEd = user.OrgEd;\r\n                if (orgEd != null) {\r\n                    orgEd = orgEd.Replace(\" \\\"Сургутнефтегаз\\\"\", ControlChar.NonBreakingSpace + \"«Сургутнефтегаз»\");\r\n                    orgEd = orgEd.Replace(\" \\\"СургутАСУнефть\\\"\", ControlChar.NonBreakingSpace + \"«СургутАСУнефть»\");       \r\n                } \r\n                dataToExport.managerPost = string.Format(\"{0} {1}, {2}\", tempPost.PLANS, orgEd, \"руководитель проекта\");  \r\n            }\r\n        }\r\n\r\n        // получим id шаблонов\r\n        //var objectAppId = Api.TeamNetwork.ObjectAppService.GetByObject(projectData.id).Id;\r\n        //var tempLateList = Api.TeamNetwork.ObjectAppExportService.ListExportTemplates(objectAppId).ToList();\r\n        // найдем нужный нам шаблон\r\n        //foreach (var tempLate in tempLateList) { \r\n        //    if (needToPrintComm == true && tempLate.Alias == \"Export_project\") {\r\n        //        userCommandContext.DocumentTemplateId = tempLate.Id;\r\n        //    }\r\n        //    if (needToPrintComm == false && tempLate.Alias == \"Export_project_no_comments\") {\r\n        //        userCommandContext.DocumentTemplateId = tempLate.Id;\r\n        //    } \r\n        //}\r\n\r\n        if (needToPrintComm == true) {\r\n            userCommandContext.DocumentTemplateId = \"exportTemplate.8\";\r\n        } else  {\r\n            userCommandContext.DocumentTemplateId = \"exportTemplate.11\";\r\n        } \r\n \r\n        var res=Api.TeamNetwork.ObjectAppExportService.ExecuteWordExportTemplate(userCommandContext.DocumentTemplateId,dataToExport,false);\r\n \r\n        var result = new UserCommandResult {\r\n            Success = true,\r\n            Commited = true,\r\n            File=new UserCommandFileResult() {\r\n                Content=res,\r\n                Name = userCommandContext.FileName + \".docx\",\r\n                Type = \"WORD\"\r\n            },\r\n            ResultType = UserCommandResultType.Notificate,\r\n            Messages = new[] {\r\n                new UserCommandMessage {\r\n                    Severity = SeverityLevel.Normal,\r\n                    Text = \"Документ успешно выгружен\"\r\n                }\r\n            }\r\n        };\r\n\r\n        return result;\r\n    }\r\n\r\n    [Serializable]\r\n    public class Project {\r\n        public string codeName {get; set;}\r\n        public string projName {get; set;}\r\n        public string nameType {get; set;}\r\n        public string manager {get; set;}\r\n        public string managerPost {get; set;}\r\n        public string approvedText {get; set;}\r\n        public List<PlanWork> planWorkPositions {get; set;}\r\n        public List<PersonsAgree> agreePositions {get; set;}\r\n        public List<PersonsApprove> approvePositions {get; set;}\r\n    }\r\n\r\n    [Serializable]\r\n    public class PlanWork {\r\n        public string autoNumber {get; set;}\r\n        public string workName {get; set;}\r\n        public DateTime? startDate {get; set;}\r\n        public DateTime? endDate {get; set;}\r\n        public string responsible {get ;set;} \r\n        public string performers {get ;set;} \r\n        public string comment {get ;set;} \r\n    }\r\n    \r\n    [Serializable]\r\n    public class PersonsAgree {\r\n        public string agreePost {get; set;}\r\n        public string agreeName {get; set;}\r\n    }\r\n    \r\n    [Serializable]\r\n    public class PersonsApprove {\r\n        public string approvePost {get; set;}\r\n        public string approveName {get; set;}\r\n    }\r\n}\r\n",
      "Type": "CSharpExpression"
    }
  },
  "RelatedEntityGlobalAlias": {
    "$type": "Comindware.Platform.Contracts.GlobalAlias, Comindware.Platform.Contracts",
    "Type": "ExportTemplate",
    "Owner": "Project",
    "Alias": "Export_project"
  },
  "LockStateChangeType": "Undefined",
  "LockStateVisibilityType": "Undefined"
}