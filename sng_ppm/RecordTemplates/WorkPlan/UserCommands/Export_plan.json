{
  "$type": "Comindware.Platform.Contracts.UserCommandConfigurationModel, Comindware.Platform.Contracts",
  "GlobalAlias": {
    "$type": "Comindware.Platform.Contracts.GlobalAlias, Comindware.Platform.Contracts",
    "Type": "UserCommand",
    "Owner": "WorkPlan",
    "Alias": "Export_plan"
  },
  "Name": "Печать плана",
  "IsSystem": false,
  "IsDisabled": false,
  "IsPrepare": true,
  "SkipValidation": true,
  "Context": "Record",
  "Multiplicity": "OneByOne",
  "Kind": "ExportObject",
  "ResultType": "File",
  "ScriptRule": {
    "$type": "Comindware.Platform.Contracts.UserCommandScriptRuleModel, Comindware.Platform.Contracts",
    "Type": "UserCommandScript",
    "Definition": {
      "$type": "Comindware.Platform.Contracts.CSharpRuleDefinitionModel, Comindware.Platform.Contracts",
      "EntryPoint": "Script",
      "Code": "// печать плана работ\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Diagnostics;\r\nusing System.Linq;\r\nusing System.Text.RegularExpressions;\r\nusing Comindware.Data.Entity;\r\nusing Comindware.TeamNetwork.Api.Data.UserCommands;\r\nusing System.IO;\r\nusing Aspose.Words;\r\n    \r\npublic class NaturalSortComparer : IComparer<string>, IDisposable {\r\n    private bool isAscending;\r\n\r\n    public NaturalSortComparer(bool inAscendingOrder = true) {\r\n        this.isAscending = inAscendingOrder;\r\n    }\r\n\r\n    #region IComparer<string> Members\r\n\r\n    public int Compare(string x, string y) {\r\n        throw new NotImplementedException();\r\n    }\r\n\r\n    #endregion\r\n\r\n    #region IComparer<string> Members\r\n\r\n    int IComparer<string>.Compare(string x, string y) {\r\n        if (x == y) {\r\n            return 0;\r\n        }\r\n\r\n        string[] x1, y1;\r\n\r\n        if (!table.TryGetValue(x, out x1)) {\r\n            x1 = Regex.Split(x.Replace(\" \", \"\"), \"([0-9]+)\");\r\n            table.Add(x, x1);\r\n        }\r\n\r\n        if (!table.TryGetValue(y, out y1)) {\r\n            y1 = Regex.Split(y.Replace(\" \", \"\"), \"([0-9]+)\");\r\n            table.Add(y, y1);\r\n        }\r\n\r\n        int returnVal;\r\n\r\n        for (int i = 0; i < x1.Length && i < y1.Length; i++) {\r\n            if (x1[i] != y1[i]) {\r\n                returnVal = PartCompare(x1[i], y1[i]);\r\n                return isAscending ? returnVal : -returnVal;\r\n            }\r\n        }\r\n\r\n        if (y1.Length > x1.Length) {\r\n            returnVal = 1;\r\n        } else if (x1.Length > y1.Length) {\r\n            returnVal = -1;\r\n        } else {\r\n            returnVal = 0;\r\n        }\r\n\r\n        return isAscending ? returnVal : -returnVal;\r\n    }\r\n\r\n    private static int PartCompare(string left, string right) {\r\n        int x, y;\r\n        if (!int.TryParse(left, out x))\r\n            return left.CompareTo(right);\r\n\r\n        if (!int.TryParse(right, out y))\r\n            return left.CompareTo(right);\r\n\r\n        return x.CompareTo(y);\r\n    }\r\n\r\n    #endregion\r\n\r\n    private Dictionary<string, string[]> table = new Dictionary<string, string[]>();\r\n\r\n    public void Dispose() {\r\n        table.Clear();\r\n        table = null;\r\n    }\r\n}\r\n\r\n\r\n\r\npublic static class Script {\r\n\r\n    public static UserCommandResult ShowMessageToUser(string text) {\r\n        if (text == null) {\r\n            text = \"EMPTY STRING\";\r\n        }\r\n        return new UserCommandResult {\r\n            Success = false,\r\n            Commited = false,\r\n            ResultType = UserCommandResultType.Notificate,\r\n            Messages = new[] {\r\n                new UserCommandMessage {\r\n                    Severity = SeverityLevel.Normal,\r\n                    Text = text\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    public static string ShortenFIO(string fullName) {\r\n        // вместо Иванов Иван Иванович сделаем И.И.Иванов\r\n        var split = fullName.Split(' ');\r\n        if (split.Length == 3) {\r\n            return string.Format(\"{0}.{1}.{2}\", split[1][0],split[2][0],split[0]);\r\n        } else {\r\n            return fullName;\r\n        }\r\n    }\r\n    \r\n    public static List<PersonsAgree> AddAgreePersons(Comindware.Entities entities, string planId) {\r\n                \r\n        // соберем список согласующих под планом работ\r\n        var agreePersons = new List<PersonsAgree>();\r\n        \r\n        // считаем утверждающего и согласовывающих \r\n        var persons = entities.PersonAgree.Where(x => x.WorkPlan == planId).OrderBy(x => x.Autonumber).Select(x => new { x.Role, x.FIO, x.Post }).ToList();\r\n        \r\n        foreach(var p in persons)  {        \r\n            if (p.Role == \"763308\") {   // согласовано\r\n                // для каждого согласующего вытащим его И.О.Фамилию и должность\r\n                var person = new PersonsAgree();\r\n                person.agreePost = p.Post;  // вытащим должность человека\r\n \r\n                // поставим нормальные кавычки и добавим неразрывный пробел\r\n                if (person.agreePost != null) {\r\n                    person.agreePost = person.agreePost.Replace(\" \\\"Сургутнефтегаз\\\"\", ControlChar.NonBreakingSpace + \"«Сургутнефтегаз»\");\r\n                    person.agreePost = person.agreePost.Replace(\" \\\"СургутАСУнефть\\\"\", ControlChar.NonBreakingSpace + \"«СургутАСУнефть»\");       \r\n                }\r\n\r\n                foreach(var userId in p.FIO)  {\r\n                    // получим И.О.Фамилию\r\n                    person.agreeName = ShortenFIO(Api.Base.AccountService.GetAccountFullName( userId )); \r\n                }   \r\n                agreePersons.Add(person);               \r\n            }\r\n        }\r\n        \r\n        return agreePersons;\r\n    }\r\n    \r\n    public static List<PersonsApprove> AddApprovePersons(Comindware.Entities entities, string planId) {\r\n                \r\n        // соберем список утверждающих над планом работ\r\n        var approvePersons = new List<PersonsApprove>();\r\n        \r\n        // считаем утверждающего и согласовывающих \r\n        var persons = entities.PersonAgree.Where(x => x.WorkPlan == planId).OrderBy(x => x.Autonumber).Select(x => new { x.Role, x.FIO, x.Post }).ToList();\r\n\r\n        foreach(var p in persons)  {        \r\n            if (p.Role == \"763304\") {   // утверждаю\r\n                // для каждого согласующего вытащим его И.О.Фамилию и должность\r\n                var person = new PersonsApprove();\r\n                person.approvePost = p.Post;    // вытащим должность человека\r\n \r\n                // поставим нормальные кавычки и добавим неразрывный пробел\r\n                if (person.approvePost != null) {\r\n                    person.approvePost = person.approvePost.Replace(\" \\\"Сургутнефтегаз\\\"\", ControlChar.NonBreakingSpace + \"«Сургутнефтегаз»\");\r\n                    person.approvePost = person.approvePost.Replace(\" \\\"СургутАСУнефть\\\"\", ControlChar.NonBreakingSpace + \"«СургутАСУнефть»\");       \r\n                }\r\n\r\n                foreach(var userId in p.FIO)  {\r\n                    // получим И.О.Фамилию\r\n                    person.approveName = ShortenFIO(Api.Base.AccountService.GetAccountFullName( userId )); \r\n                }   \r\n                approvePersons.Add(person);             \r\n            }\r\n        }\r\n        \r\n        return approvePersons;\r\n    }\r\n    \r\n    public static string CreateOrgResp(Comindware.Entities entities, string userId, string planId, bool printOrg, bool printFio) {\r\n        // получим сокращенное фио исполнителя\r\n        var userFIO = ShortenFIO(Api.Base.AccountService.GetAccountFullName( userId ));\r\n        \r\n        // считаем состав проектной команды\r\n        var projectTeam = entities.ProjectTeam.Where(x => x.WorkPlan == planId).Select(x => new { x.Performers, x.OrgEd, }).ToList();\r\n                        \r\n        // и если пользователь находится в проектной команде, то вытащим должность и орг.единицу оттуда\r\n        string orgEd = \"\";\r\n        foreach(var user in projectTeam)  {     \r\n            if (user.Performers.Contains(userId)) {\r\n                orgEd = user.OrgEd;\r\n            }\r\n        }\r\n        \r\n        // если же пользователя нет в проектной команде, то определим орг.единицу исполнителя\r\n        if (orgEd == \"\") {\r\n            var loginAD = Api.Base.AccountService.GetAccount(userId).Username;\r\n            if (loginAD != null) {\r\n                var organisation = entities.Users.Where(x => x.SNG_LOGIN == loginAD).Select(x => new { x.OE }).FirstOrDefault();\r\n                if (organisation != null) {\r\n                    orgEd = organisation.OE;\r\n                }\r\n            }\r\n        }\r\n\r\n        // поставим нормальные кавычки и добавим неразрывный пробел\r\n        if (orgEd != null) {\r\n            orgEd = orgEd.Replace(\" \\\"Сургутнефтегаз\\\"\", ControlChar.NonBreakingSpace + \"«Сургутнефтегаз»\");\r\n            orgEd = orgEd.Replace(\" \\\"СургутАСУнефть\\\"\", ControlChar.NonBreakingSpace + \"«СургутАСУнефть»\");       \r\n        }\r\n \r\n        if (printOrg == true && printFio == true) {\r\n            if (orgEd + userFIO != userFIO) {\r\n                return string.Format(\"{0} ({1})\", orgEd, userFIO);\r\n            } else {\r\n                return string.Format(\"{0}\", userFIO);\r\n            }\r\n        } else if (printOrg == false && printFio == true) {\r\n            return string.Format(\"{0}\", userFIO);\r\n        } else if (printOrg == true && printFio == false) {\r\n            return string.Format(\"{0}\", orgEd);\r\n        } else {\r\n            return \"\";\r\n        }\r\n \r\n    }\r\n    \r\n    public static UserCommandResult Main(UserCommandContext userCommandContext, Comindware.Entities entities) {\r\n        // прочитаем id плана работ для которого будем делать печать\r\n        var rootRecordId = userCommandContext.ObjectIds[0];\r\n        \r\n        // данные родительского проекта\r\n        var planData = entities.WorkPlan.Where(x => x.id == rootRecordId).Select(x => new { x.id, x.Name, x.Base, x.PrintOrg, x.PrintFio, x.PrintComm }).FirstOrDefault();\r\n\r\n        // получим id всех элементов отмеченных галочкой\r\n        var selectedItems = userCommandContext.SelectedIds; \r\n        var worksToPrint = new List<String>();\r\n        \r\n        // оставим в них только нужные нам задачи для печати\r\n        // считаем все задачи в плане\r\n        // var allWorks = entities.Workitem.Where(x => x.WorkPlan == rootRecordId).Select(x => new { x.id }).ToList();\r\n        var allWorks = entities.Workitem.Select(x => new { x.id }).ToList();\r\n        \r\n        // удалим id-шники нерелевантные к задачам\r\n        foreach(var s in selectedItems)  {\r\n            if (allWorks.FindIndex(f => f.id == s) >= 0) {\r\n                worksToPrint.Add(s);\r\n            }\r\n        }\r\n \r\n        // если не выбраны даннные на печать, то считаем, что нужно вывести на печать все работы\r\n        if ( worksToPrint.Count() == 0 ) {\r\n            allWorks = entities.Workitem.Where(x => x.PlanWork == rootRecordId).Select(x => new { x.id }).ToList();\r\n            foreach (var a in allWorks) {\r\n                worksToPrint.Add(a.id);\r\n            }\r\n        }\r\n  \r\n        // создадим заведомо пустой список, в который будем складывать все нужные нам задачи\r\n        var planPositions = entities.Workitem.Where(x => x.id == \"XXXX\").Select(x => new {\r\n               x.AutoNumber, x.SerialNumber, x.Name, x.PlannedStartDate, x.PlannedEndDate, x.Responsible, x.Performers, x.Comment, x.id\r\n            }).ToList();\r\n        \r\n        var dataToExport = new Project() {\r\n            projName = planData.Name,\r\n            projReason = planData.Base,\r\n        };\r\n        \r\n        var positionsToAdd = new List<PlanWork>();              \r\n        \r\n        foreach(var w in worksToPrint)  {\r\n            // вытащим все данные по задаче\r\n            var tempPosition = entities.Workitem.Where(x => x.id == w).Select(x => new {\r\n               x.AutoNumber, x.SerialNumber, x.Name, x.PlannedStartDate, x.PlannedEndDate, x.Responsible, x.Performers, x.Comment, x.id\r\n            }).FirstOrDefault();\r\n            \r\n            planPositions.Add(tempPosition);\r\n        }\r\n \r\n        // отсортируем по номеру\r\n        planPositions = planPositions.OrderBy(o=>o.AutoNumber, new NaturalSortComparer()).ToList();\r\n\r\n        bool needToPrintOrg = false;\r\n        if (planData.PrintOrg != null && (bool) planData.PrintOrg == true) {\r\n            needToPrintOrg = true;\r\n        }\r\n\r\n        bool needToPrintFio = false;\r\n        if (planData.PrintFio != null && (bool) planData.PrintFio == true) {\r\n            needToPrintFio = true;\r\n        }\r\n\r\n        bool needToPrintComm = false;\r\n        if (planData.PrintComm != null && (bool) planData.PrintComm == true) {\r\n            needToPrintComm = true;\r\n        }\r\n\r\n        // идем по общему списку задач\r\n        foreach(var p in planPositions)  {\r\n            var singlePosition  = new PlanWork() {\r\n                autoNumber  = p.AutoNumber.ToString(),\r\n                workName    = p.Name,\r\n                //startDate   = p.PlannedStartDate,\r\n                //endDate     = p.PlannedEndDate,\r\n                comment     = p.Comment,\r\n                responsible = \"\",\r\n                performers  = \"\",\r\n            };  \r\n\r\n\r\n            // из-за смещения часовых поясов добавим 5 часов\r\n            if (p.PlannedStartDate != null) {\r\n                singlePosition.startDate = ((DateTime) p.PlannedStartDate).AddHours(5);\r\n            }\r\n\r\n            if (p.PlannedEndDate != null) {\r\n                singlePosition.endDate = ((DateTime) p.PlannedEndDate).AddHours(5);\r\n            }\r\n        \r\n            // получим ответственного\r\n            if(p.Responsible != null) { \r\n                var userIds = p.Responsible.ToList();\r\n                foreach (var singleId in userIds) {\r\n                    // результат будет в виде строки ОРГ.ЕДИНИЦА(ФИО)\r\n                    var mergedString = CreateOrgResp(entities, singleId, planData.id, needToPrintOrg, needToPrintFio);\r\n                    if (singlePosition.responsible != \"\") {\r\n                        singlePosition.responsible = singlePosition.responsible + \", \" + mergedString;\r\n                    } else {\r\n                        singlePosition.responsible = mergedString;\r\n                    }\r\n                }\r\n            }\r\n  \r\n            // соединим всех исполнителей через запятую\r\n            if(p.Performers != null) { \r\n                var userIds = p.Performers.ToList();\r\n                foreach (var singleId in userIds) {\r\n                    // результат будет в виде строки ОРГ.ЕДИНИЦА(ФИО)\r\n                    var mergedString = CreateOrgResp(entities, singleId, planData.id, needToPrintOrg, needToPrintFio);\r\n                    if (singlePosition.performers != \"\") {\r\n                        singlePosition.performers = singlePosition.performers + \", \" + mergedString;\r\n                    } else {\r\n                        singlePosition.performers = mergedString;\r\n                    }\r\n                }\r\n            }\r\n            \r\n            // если в списке ответственных выбрана организация, то нужно удалить дубли из отчетственных и исполнителей\r\n            if (needToPrintOrg == true) {\r\n                singlePosition.responsible = String.Join(\", \", singlePosition.responsible.Split(',').Select(x => x.Trim()).ToList().Distinct(StringComparer.CurrentCultureIgnoreCase).ToArray());\r\n                singlePosition.performers = String.Join(\", \", singlePosition.performers.Split(',').Select(x => x.Trim()).ToList().Distinct(StringComparer.CurrentCultureIgnoreCase).ToArray());\r\n            }\r\n            \r\n            positionsToAdd.Add(singlePosition);\r\n        }\r\n \r\n        // табличка с планом работ готова            \r\n        dataToExport.planWorkPositions = positionsToAdd;\r\n        \r\n        // соберем список согласующих под планом работ\r\n        dataToExport.agreePositions = AddAgreePersons(entities, rootRecordId);\r\n        dataToExport.approvePositions = AddApprovePersons(entities, rootRecordId);\r\n\r\n        // получим id шаблонов\r\n        //var objectAppId = Api.TeamNetwork.ObjectAppService.GetByObject(rootRecordId).Id;\r\n        //var tempLateList = Api.TeamNetwork.ObjectAppExportService.ListExportTemplates(objectAppId).ToList();\r\n        //// найдем нужный нам шаблон\r\n        //foreach (var tempLate in tempLateList) { \r\n        //    if (needToPrintComm == true && tempLate.Alias == \"Export_plan\") {\r\n        //        userCommandContext.DocumentTemplateId = tempLate.Id;\r\n        //    }\r\n        //    if (needToPrintComm == false && tempLate.Alias == \"Export_plan_no_comments\") {\r\n        //        userCommandContext.DocumentTemplateId = tempLate.Id;\r\n        //    } \r\n        //}\r\n\r\n        if (needToPrintComm == true) {\r\n            userCommandContext.DocumentTemplateId = \"exportTemplate.9\";\r\n        } else {\r\n            userCommandContext.DocumentTemplateId = \"exportTemplate.10\";\r\n        }\r\n \r\n        var res=Api.TeamNetwork.ObjectAppExportService.ExecuteWordExportTemplate(userCommandContext.DocumentTemplateId,dataToExport,false);\r\n \r\n        var result = new UserCommandResult {\r\n            Success = true,\r\n            Commited = true,\r\n            File=new UserCommandFileResult() {\r\n                Content=res,\r\n                Name = userCommandContext.FileName + \".doc\",\r\n                Type = \"DOC\"\r\n            },\r\n            ResultType = UserCommandResultType.Notificate,\r\n            Messages = new[] {\r\n                new UserCommandMessage {\r\n                    Severity = SeverityLevel.Normal,\r\n                    Text = \"Документ успешно выгружен\"\r\n                }\r\n            }\r\n        };\r\n\r\n        return result;\r\n    }\r\n\r\n    [Serializable]\r\n    public class Project {\r\n        public string projName {get; set;}\r\n        public string projReason {get; set;}\r\n        public List<PlanWork> planWorkPositions {get; set;}\r\n        public List<PersonsAgree> agreePositions {get; set;}\r\n        public List<PersonsApprove> approvePositions {get; set;}\r\n    }\r\n\r\n    [Serializable]\r\n    public class PlanWork {\r\n        public string autoNumber {get; set;}\r\n        public string workName {get; set;}\r\n        public DateTime? startDate {get; set;}\r\n        public DateTime? endDate {get; set;}\r\n        public string responsible {get ;set;} \r\n        public string performers {get ;set;} \r\n        public string comment {get ;set;} \r\n    }\r\n    \r\n    [Serializable]\r\n    public class PersonsAgree {\r\n        public string agreePost {get; set;}\r\n        public string agreeName {get; set;}\r\n    }\r\n    \r\n    [Serializable]\r\n    public class PersonsApprove {\r\n        public string approvePost {get; set;}\r\n        public string approveName {get; set;}\r\n    }\r\n}",
      "Type": "CSharpExpression"
    }
  },
  "RelatedEntityGlobalAlias": {
    "$type": "Comindware.Platform.Contracts.GlobalAlias, Comindware.Platform.Contracts",
    "Type": "ExportTemplate",
    "Owner": "WorkPlan",
    "Alias": "Export_plan"
  },
  "LockStateChangeType": "NotChange",
  "LockStateVisibilityType": "VisibleOnLock"
}