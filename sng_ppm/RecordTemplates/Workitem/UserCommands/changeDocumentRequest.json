{
  "$type": "Comindware.Platform.Contracts.UserCommandConfigurationModel, Comindware.Platform.Contracts",
  "GlobalAlias": {
    "$type": "Comindware.Platform.Contracts.GlobalAlias, Comindware.Platform.Contracts",
    "Type": "UserCommand",
    "Owner": "Workitem",
    "Alias": "changeDocumentRequest"
  },
  "Name": "Изменение ДИ",
  "IsSystem": false,
  "IsDisabled": false,
  "IsPrepare": false,
  "SkipValidation": false,
  "Context": "Record",
  "Multiplicity": "OneByOne",
  "Kind": "Script",
  "ResultType": "DataChange",
  "ScriptRule": {
    "$type": "Comindware.Platform.Contracts.UserCommandScriptRuleModel, Comindware.Platform.Contracts",
    "Type": "UserCommandScript",
    "Definition": {
      "$type": "Comindware.Platform.Contracts.CSharpRuleDefinitionModel, Comindware.Platform.Contracts",
      "EntryPoint": "Script",
      "Code": "// 4 РАБОТА Изменение ДИ\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing Comindware.Data.Entity;\r\nusing Comindware.TeamNetwork.Api.Data.UserCommands;\r\nusing Newtonsoft.Json;\r\nusing System.Net;\r\nusing System.IO;\r\nusing System.Text;\r\nusing System.Diagnostics;\r\nusing RestSharp;\r\nusing RestSharp.Authenticators;\r\n\r\npublic class Script {\r\n    public class DocumentChange {\r\n        public string Projector { get; set; }\r\n        public string SmCdGuid { get; set; }        \r\n        public string ProjDate { get; set; }\r\n        public string TestDate { get; set; }\r\n    }\r\n\r\n    public static UserCommandResult ShowMessageToUser(string message) {\r\n        return new UserCommandResult {\r\n            Success = false,\r\n            Commited = false,\r\n            ResultType = UserCommandResultType.DataChange,\r\n            Messages = new[] {\r\n                new UserCommandMessage {\r\n                    Severity = SeverityLevel.Normal,\r\n                    Text = message ?? \"debug\"\r\n                }\r\n            }\r\n        };\r\n    }\r\n    \r\n    public class DocumentChangeRaw {\r\n        [JsonProperty(\"d\")]\r\n        public DocumentChange DocumentChangeResult { get; set; }\r\n        \r\n        [JsonProperty(\"error\")]\r\n        public ErrorResult Error { get; set; }\r\n    }\r\n\r\n    public class ErrorResult {\r\n        [JsonProperty(\"message\")]\r\n        public Message Message { get; set; }\r\n    }\r\n\r\n    public class Message {\r\n        [JsonProperty(\"value\")]\r\n        public string Value { get; set; }\r\n    }\r\n\r\n    public static string GetObjectValue(string objId, string propertyAlias) {\r\n        var data = Api.TeamNetwork.ObjectService.GetPropertyValues(new[] {objId}, new string[] {propertyAlias});\r\n        return data[objId][propertyAlias] as string;\r\n    }\r\n\r\n    public static UserCommandResult Main(UserCommandContext userCommandContext, Comindware.Entities entities) {\r\n        // Получаем идентификатор текущей работы\r\n        var workItemId = userCommandContext.ObjectIds.FirstOrDefault();\r\n\r\n        // Получаем dictionary с данными о текущей работе\r\n        var workItemData = Api.TeamNetwork.ObjectService.GetWithAlias(\"Workitem\", workItemId);\r\n\r\n        // посчитаем количество исполнителей на задачу\r\n        var SAPPerformer = entities.Workitem.Where(x => x.id == workItemId).Select(x => new { x.SAPPerformer }).ToList();\r\n        if (SAPPerformer.Count() > 1) {\r\n            return ShowMessageToUser(\"На задаче ChaRM должен быть один исполнитель!\");\r\n        }\r\n\r\n        object performerRefObj;\r\n        workItemData.TryGetValue(\"SAPPerformer\", out performerRefObj);\r\n        string sapPerformerRefId = performerRefObj as string;\r\n        var performerSapLogin = GetObjectValue(sapPerformerRefId, \"SAP_LOGIN\");\r\n \r\n        object plannedEndDateObj;\r\n        workItemData.TryGetValue(\"PlannedEndDate\", out plannedEndDateObj);\r\n        DateTime plannedEndDate = (DateTime) plannedEndDateObj;\r\n        \r\n        // Стяпшин Белинская, добавим +5 часов из-за проблем с часовыми поясами\r\n        plannedEndDate = plannedEndDate.AddMinutes(300);\r\n        \r\n        var documentChange = new DocumentChange {\r\n            Projector = performerSapLogin\r\n        };\r\n     \r\n        // считаем все значения настроек\r\n        var settingsId = entities.CustomSettings.Where(x => x.name == \"SolmanCharm\").Select(x => new { x.id }).FirstOrDefault();\r\n        var settings = entities.CustomSettingsValues.Where(x => x.customSettings == settingsId.id).Select(x => new { x.parameter, x.value }).ToList();\r\n\r\n        // прочитаем значение логина и пароля пользователя\r\n        var userLogin = settings.Where(x => x.parameter == \"userLogin\").Select(x => x.value).FirstOrDefault();\r\n        var userPassword = settings.Where(x => x.parameter == \"userPassword\").Select(x => x.value).FirstOrDefault();\r\n\r\n        // прочитаем систему, с которой будем интегрироваться\r\n        var currentSystem = settings.Where(x => x.parameter == \"currentSystem\").Select(x => x.value).FirstOrDefault();\r\n        var systemAddr = settings.Where(x => x.parameter == currentSystem).Select(x => x.value).FirstOrDefault();\r\n\r\n        // сформируем адрес сервиса\r\n        var url = systemAddr + \"/sap/opu/odata/sap/ZGP_ODATA_CHARM_SRV\";\r\n \r\n        if (userCommandContext.SelectedIds == null || !userCommandContext.SelectedIds.Any()) {\r\n            return ShowMessageToUser(\"Не выбраны ДИ для обновления\");\r\n        }\r\n \r\n        var client = new RestClient(url) {\r\n            Authenticator = new HttpBasicAuthenticator(userLogin, userPassword)\r\n        };\r\n        \r\n        string jsonData = null;\r\n        var success = false;\r\n        string errorMessage = null;\r\n        foreach(var selectedId in userCommandContext.SelectedIds) {\r\n\r\n            // получим флажок - нужно ли тестирование сопровождением  \r\n            \r\n            bool NoTestSopr = true;\r\n            var noTest = entities.ChaRMDoc.Where(x => x.id == selectedId).Select(x => new { x.NoTestSopr }).FirstOrDefault().NoTestSopr;\r\n            if (noTest != null && (bool) noTest == false) {\r\n                NoTestSopr = false;\r\n            }\r\n            \r\n            documentChange.TestDate = \"\";\r\n            documentChange.ProjDate = \"\";\r\n\r\n            // если установлена галочка \"без тестирования сопровождения\", то передавать только срок проектирования\r\n            if (NoTestSopr) {\r\n                documentChange.ProjDate = plannedEndDate.ToShortDateString();\r\n            } else {\r\n                documentChange.TestDate = plannedEndDate.ToShortDateString();\r\n            }\r\n\r\n            var request = new RestSharp.RestRequest(\"/ChangeDocumentSet(\\'')\", Method.PUT);\r\n            request.JsonSerializer.ContentType = \"application/json; charset=utf-8\";\r\n            request.AddHeader(\"X-Requested-With\", \"X\");\r\n            var guid = GetObjectValue(selectedId, \"GUID\");\r\n            documentChange.SmCdGuid = guid;\r\n            jsonData = JsonConvert.SerializeObject(documentChange, new JsonSerializerSettings {NullValueHandling = NullValueHandling.Ignore});\r\n            request.AddParameter(\"application/json\", jsonData , ParameterType.RequestBody);\r\n            try {\r\n                var response = client.Execute(request);\r\n                DocumentChangeRaw documentChangeResultRaw = JsonConvert.DeserializeObject<DocumentChangeRaw>(response.Content);\r\n                success = (int)response.StatusCode < 400;\r\n                if (!success) {\r\n                    errorMessage = documentChangeResultRaw.Error.Message.Value;\r\n                    break;\r\n                }\r\n            }\r\n            catch {\r\n                errorMessage = \"Ошибка, обратитесь к системному администратору\";\r\n            }\r\n        }\r\n        var result = new UserCommandResult {\r\n            Success = true,\r\n            Commited = true,\r\n            ResultType = UserCommandResultType.DataChange,\r\n            Messages = new[] {\r\n                new UserCommandMessage {\r\n                    Severity = SeverityLevel.Normal,\r\n                    Text = success ? \"Выбранные ДИ успешно изменены\" : errorMessage\r\n                }\r\n            }\r\n        };\r\n        return result;            \r\n    }\r\n}\r\n",
      "Type": "CSharpExpression"
    }
  },
  "RelatedEntityGlobalAlias": {
    "$type": "Comindware.Platform.Contracts.GlobalAlias, Comindware.Platform.Contracts",
    "Type": "Undefined"
  },
  "LockStateChangeType": "Undefined",
  "LockStateVisibilityType": "Undefined"
}