{
  "$type": "Comindware.Platform.Contracts.UserCommandConfigurationModel, Comindware.Platform.Contracts",
  "GlobalAlias": {
    "$type": "Comindware.Platform.Contracts.GlobalAlias, Comindware.Platform.Contracts",
    "Type": "UserCommand",
    "Owner": "Workitem",
    "Alias": "sendDocumentChange"
  },
  "Name": "Отправка ДИ",
  "IsSystem": false,
  "IsDisabled": false,
  "IsPrepare": false,
  "SkipValidation": false,
  "Context": "Record",
  "Multiplicity": "OneByOne",
  "Kind": "Script",
  "ResultType": "DataChange",
  "ScriptRule": {
    "$type": "Comindware.Platform.Contracts.UserCommandScriptRuleModel, Comindware.Platform.Contracts",
    "Type": "UserCommandScript",
    "Definition": {
      "$type": "Comindware.Platform.Contracts.CSharpRuleDefinitionModel, Comindware.Platform.Contracts",
      "EntryPoint": "Script",
      "Code": "// 5 РАБОТА Отправка ДИ\r\nusing System;\r\nusing System.Collections.Generic; \r\nusing System.Linq;\r\nusing Comindware.Data.Entity;\r\nusing Comindware.TeamNetwork.Api.Data.UserCommands;\r\nusing Newtonsoft.Json;\r\nusing System.Net;\r\nusing System.IO;\r\nusing System.Text;\r\nusing System.Diagnostics;\r\nusing RestSharp;\r\nusing RestSharp.Authenticators;\r\n\r\npublic class Script {\r\n    public class DocumentChange {\r\n        public string Description { get; set; }\r\n        public string CbapProjectReference { get; set; }\r\n        public string Projector { get; set; }\r\n        public string SmRfcGuid { get; set; }        \r\n\r\n        public string Text { get; set; }\r\n        public string ProjDate { get; set; }\r\n        public string TestDate { get; set; }\r\n        public string SystemId { get; set; }\r\n        public string ItSolutionGroup { get; set; }\r\n        public string ItSolution { get; set; }\r\n        public string State { get; set; }\r\n        public string WebReference { get; set; }\r\n        public string SmRfcId { get; set; }\r\n        \r\n        public string SmCdId { get; set; }\r\n        public string SmCdGuid { get; set; }\r\n    }\r\n\r\n    public class DocumentChangeResult : DocumentChange {\r\n        public string ErrorText { get; set; }\r\n        public string ErrorCode { get; set; }\r\n    }\r\n\r\n    public class DocumentChangeRaw {\r\n        [JsonProperty(\"d\")]\r\n        public DocumentChangeResult DocumentChangeResult { get; set; }\r\n        \r\n        [JsonProperty(\"error\")]\r\n        public ErrorResult Error { get; set; }\r\n    }\r\n\r\n    public class ErrorResult {\r\n        [JsonProperty(\"message\")]\r\n        public Message Message { get; set; }\r\n    }\r\n\r\n    public class Message {\r\n        [JsonProperty(\"value\")]\r\n        public string Value { get; set; }\r\n    }\r\n\r\n    public static UserCommandResult ShowMessageToUser(string m) {\r\n        if (m == null) {\r\n            m = \" \";\r\n        }\r\n        return new UserCommandResult {\r\n            Success = false,\r\n            Commited = false,\r\n            ResultType = UserCommandResultType.DataChange,\r\n            Messages = new[] {\r\n                new UserCommandMessage {\r\n                    Severity = SeverityLevel.Normal,\r\n                    Text = m\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    public static string GetObjectValue(string objId, string propertyAlias) {\r\n        var data = Api.TeamNetwork.ObjectService.GetPropertyValues(new[] {objId}, new string[] {propertyAlias});\r\n        return data[objId][propertyAlias] as string;\r\n    }\r\n\r\n    public static UserCommandResult Main(UserCommandContext userCommandContext, Comindware.Entities entities)\r\n    {\r\n        // получим статус текущей задачи\r\n        var rootRecordId = userCommandContext.ObjectIds[0];\r\n        var status = entities.Workitem.Where(x => x.id == rootRecordId).Select(x => new { x.Status }).FirstOrDefault().Status;\r\n        // если статус Завершена, то запрещаем создавать новые ДИ в этой задаче\r\n        if ( status == \"62\" ) { \r\n            return ShowMessageToUser(\"Задача завершена, нельзя создать новые ДИ!\");         \r\n        }\r\n\r\n        // Получаем идентификатор текущего проекта\r\n        var workItemId = userCommandContext.ObjectIds.FirstOrDefault();\r\n        var serverAddress = Api.Base.GlobalConfigurationService.ServerAddress;\r\n        var objectApp = Api.TeamNetwork.ObjectAppService.GetByAlias(\"Workitem\");\r\n        var objectAppId = objectApp.Id;\r\n        var webReference = serverAddress + \"/#form/\" + objectAppId + \"/default/\" + workItemId;\r\n         \r\n        // Получаем dictionary с данными о текущем проекте\r\n        var workItemData = Api.TeamNetwork.ObjectService.GetWithAlias(\"Workitem\", workItemId);\r\n\r\n        object parentProjectObj;\r\n        string changeRequestId = null;\r\n        string changeRequestGuid = null;\r\n        workItemData.TryGetValue(\"parentProject\", out parentProjectObj);\r\n        string parentProjectRefId = parentProjectObj as string;\r\n        if (parentProjectObj != null) {\r\n            changeRequestId = GetObjectValue(parentProjectRefId, \"ChangeRequestRef\") as string;\r\n            if (changeRequestId != null) {\r\n                changeRequestGuid = GetObjectValue(changeRequestId, \"GUID\") as string;\r\n            }\r\n        } else {\r\n            // если не нашли ЗИ по проекту, попробуем найти ЗИ по плану работ\r\n            object parentPlanObj;\r\n            workItemData.TryGetValue(\"PlanWork\", out parentPlanObj);\r\n            string parentPlanRefId = parentPlanObj as string;\r\n            if (parentPlanObj != null) {\r\n                changeRequestId = GetObjectValue(parentPlanRefId, \"ChangeRequestRef\") as string;\r\n                if (changeRequestId != null) {\r\n                    changeRequestGuid = GetObjectValue(changeRequestId, \"GUID\") as string;\r\n                }\r\n            } \r\n        }\r\n        \r\n        if (changeRequestId == null || changeRequestGuid == null) {\r\n            return ShowMessageToUser(\"По связанному проекту/плану не существует ЗИ\");\r\n        }\r\n\r\n        object workItemName;\r\n        workItemData.TryGetValue(\"Name\", out workItemName);\r\n        string name = workItemName as string;\r\n \r\n        object performerRefObj;\r\n        workItemData.TryGetValue(\"SAPPerformer\", out performerRefObj);\r\n        string sapPerformerRefId = performerRefObj as string;\r\n        \r\n        if (string.IsNullOrEmpty(sapPerformerRefId)) {\r\n            return ShowMessageToUser(\"В работе должен быть указан 1 исполнитель (проектировщик)\");\r\n        }\r\n\r\n        var performerSapLogin = GetObjectValue(sapPerformerRefId, \"SAP_LOGIN\");\r\n\r\n        // определим указанный код информационной системы\r\n    \tvar tempInfSystem = entities.Workitem.Where(x => x.id == rootRecordId).Select(x => new { x.InfSystem }).FirstOrDefault().InfSystem;\r\n    \tif (tempInfSystem == null) {\r\n    \t\treturn ShowMessageToUser(\"Не указана информационная система!\");\t\r\n    \t}\r\n    \tvar infSystemCode = entities.InfSystem.Where(x => x.id == tempInfSystem).Select(x => new { x.code }).FirstOrDefault().code;\r\n \r\n        object plannedEndDateObj;\r\n        workItemData.TryGetValue(\"PlannedEndDate\", out plannedEndDateObj);\r\n        DateTime plannedEndDate = (DateTime) plannedEndDateObj;\r\n        \r\n        // Стяпшин - Белинская, добавим 5 часов, т.к. сейчас идет смещение на 5 часов назад\r\n        plannedEndDate = plannedEndDate.AddMinutes(300);\r\n\r\n        var documentChange = new DocumentChange {\r\n            Description = name,\r\n            Text = name,\r\n            CbapProjectReference = workItemId,\r\n            Projector = performerSapLogin,\r\n            SmRfcGuid = changeRequestGuid,\r\n            SystemId = infSystemCode,\r\n            WebReference = webReference\r\n        };\r\n\r\n        // получим флажок - нужно ли тестирование сопровождением  \r\n        var noTestForDI = entities.Workitem.Where(x => x.id == rootRecordId).Select(x => new { x.noTestForDI }).FirstOrDefault().noTestForDI;\r\n \r\n        // если установлена галочка \"без тестирования сопровождения\", то передавать только строк проектирования\r\n        if ((bool) noTestForDI) {\r\n            documentChange.ProjDate = plannedEndDate.ToShortDateString();\r\n        } else {\r\n            documentChange.TestDate = plannedEndDate.ToShortDateString();\r\n        }\r\n\r\n        // считаем все значения настроек\r\n        var settingsId = entities.CustomSettings.Where(x => x.name == \"SolmanCharm\").Select(x => new { x.id }).FirstOrDefault();\r\n        var settings = entities.CustomSettingsValues.Where(x => x.customSettings == settingsId.id).Select(x => new { x.parameter, x.value }).ToList();\r\n\r\n        // прочитаем значение логина и пароля пользователя\r\n        var userLogin = settings.Where(x => x.parameter == \"userLogin\").Select(x => x.value).FirstOrDefault();\r\n        var userPassword = settings.Where(x => x.parameter == \"userPassword\").Select(x => x.value).FirstOrDefault();\r\n\r\n        // прочитаем систему, с которой будем интегрироваться\r\n        var currentSystem = settings.Where(x => x.parameter == \"currentSystem\").Select(x => x.value).FirstOrDefault();\r\n        var systemAddr = settings.Where(x => x.parameter == currentSystem).Select(x => x.value).FirstOrDefault();\r\n\r\n        // сформируем адрес сервиса\r\n        var url = systemAddr + \"/sap/opu/odata/sap/ZGP_ODATA_CHARM_SRV\";\r\n \r\n        var jsonData = JsonConvert.SerializeObject(documentChange, new JsonSerializerSettings { NullValueHandling = NullValueHandling.Ignore });\r\n        var client = new RestClient(url) {\r\n            Authenticator = new HttpBasicAuthenticator(userLogin, userPassword)\r\n        };\r\n        var request = new RestSharp.RestRequest(\"/ChangeDocumentSet\", Method.POST);\r\n        request.JsonSerializer.ContentType = \"application/json; charset=utf-8\";\r\n        request.AddParameter(\"application/json\", jsonData , ParameterType.RequestBody);\r\n        request.AddHeader(\"X-Requested-With\", \"X\");\r\n\r\n        var response = client.Execute(request);\r\n        DocumentChangeRaw documentChangeResultRaw = JsonConvert.DeserializeObject<DocumentChangeRaw>(response.Content);\r\n        DocumentChangeResult documentChangeResult = null;\r\n        var success = (int)response.StatusCode < 400;\r\n        string errorText = \"\";\r\n        if (success) {\r\n            try {\r\n                documentChangeResult = documentChangeResultRaw.DocumentChangeResult;               \r\n                var documentChangeUrl = systemAddr + \"/sap/crm_logon?sap-client=300&CRM-OBJECT-TYPE=AIC_OB_CMCD&CRM-OBJECT-ACTION=B&CRM-OBJECT-VALUE=\";\r\n                \r\n                var documentChangeCreationData = new Dictionary<string, object>() {\r\n                    { \"WorkItem\",  workItemId},\r\n                    { \"documentNumber\",  documentChangeResult.SmCdId },\r\n                    { \"GUID\",  documentChangeResult.SmCdGuid },\r\n                    { \"httpLink\",  string.Format(\"<a target=\\\"_blank\\\" href=\\\"{0}{1}\\\">{2}\", documentChangeUrl, documentChangeResult.SmCdGuid,  documentChangeResult.SmCdId)},\r\n                    { \"docStatus\", documentChangeResult.State },\r\n                    { \"NoTestSopr\", noTestForDI }\r\n                };\r\n\r\n                Api.TeamNetwork.ObjectService.CreateWithAlias(\"ChaRMDoc\", documentChangeCreationData);\r\n            }\r\n            catch(Exception ex) {\r\n                success = false;\r\n                errorText = ex.Message;\r\n            }\r\n        } else {\r\n            success = false;\r\n            var error = documentChangeResultRaw.Error;\r\n            if (documentChangeResultRaw.Error != null && documentChangeResultRaw.Error.Message != null) {\r\n                errorText = documentChangeResultRaw.Error.Message.Value;\r\n            } else {\r\n                errorText = \"Ошибка, обратитесь к системному администратору\";\r\n            }\r\n        }\r\n \r\n        var result = new UserCommandResult {\r\n            Success = success,\r\n            Commited = success,\r\n            ResultType = UserCommandResultType.DataChange,\r\n            Messages = new[] {\r\n                new UserCommandMessage {\r\n                    Severity = success ? SeverityLevel.Normal : SeverityLevel.Critical,\r\n                    Text = success ? \"Создан ДИ с номером: \" + documentChangeResult.SmCdId : errorText\r\n                }\r\n            }\r\n        };\r\n        return result;\r\n    }\r\n}\r\n",
      "Type": "CSharpExpression"
    }
  },
  "RelatedEntityGlobalAlias": {
    "$type": "Comindware.Platform.Contracts.GlobalAlias, Comindware.Platform.Contracts",
    "Type": "Undefined"
  },
  "LockStateChangeType": "Undefined",
  "LockStateVisibilityType": "Undefined"
}